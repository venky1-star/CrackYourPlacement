/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* mergelist(struct ListNode *head1,struct ListNode *head2)
{
    if(head1==NULL)
        return head2;
    if(head2==NULL)
        return head1;
    struct ListNode *head,*temp;
    if(head1->val<head2->val)
    {
        head=head1;
        head1=head1->next;
    }
    else
    {
        head=head2;
        head2=head2->next;
    }
    temp=head;
    while(head1 && head2)
    {
        if(head1->val<head2->val)
        {
            head->next=head1;
            head1=head1->next;
        }
        else
        {
            head->next=head2;
            head2=head2->next;
        }
        head=head->next;
    }
    if(head1)
    head->next=head1;
    if(head2)
        head->next=head2;
    return temp;
}

struct ListNode* sortList(struct ListNode* head){
    if(!head || !head->next)
        return head;
    struct ListNode *slow=head,*fast=head,*temp;
    while(fast && fast->next)
    {
        temp=slow;
        slow=slow->next;
        fast=fast->next->next;
    }
    temp->next=NULL;
    head=sortList(head);
    slow=sortList(slow);
   return mergelist(head,slow);
   }
