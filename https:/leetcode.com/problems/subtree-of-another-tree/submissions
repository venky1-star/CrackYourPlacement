/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

struct queue
{
    struct TreeNode *node;
    struct queue *next;
}*front=NULL,*rear=NULL;
bool isSubtree(struct TreeNode* root, struct TreeNode* subRoot){
    if(!root && !subRoot)
        return true;
    if(!root && subRoot)
        return false;
    if(root && !subRoot)
        return false;
struct TreeNode *temp;
struct queue *ptr;
    front=rear=(struct queue *)malloc(sizeof(struct queue));
    front->node=rear->node=root;
    front->next=rear->next=NULL;
    while(front)
    {
        temp=front->node;
        if(temp->val==subRoot->val)
        {
            int f=isidentical(temp,subRoot);
            if(f==1)
            {
                while(front)
                {
                    ptr=front;
                    front=front->next;
                    free(ptr);
                }
                return true;
            }
        }
        if(temp->left)
        {
            rear->next=(struct queue *)malloc(sizeof(struct queue ));
            rear=rear->next;
            rear->node=temp->left;
            rear->next=NULL;
        }
        if(temp->right)
        {
            rear->next=(struct queue *)malloc(sizeof(struct queue ));
            rear=rear->next;
            rear->node=temp->right;
            rear->next=NULL;
        }
        ptr=front;
        front=front->next;
        free(ptr);
    }
    return false;
}
int isidentical(struct TreeNode *root,struct TreeNode *root1)
{
    if(!root && !root1)
        return 1;
    if(!root && root1)
        return 0;
    if(root && !root1)
        return 0;
    if(root->val==root1->val)
        return isidentical(root->left,root1->left) && isidentical(root->right,root1->right);
    else
        return 0;
}
